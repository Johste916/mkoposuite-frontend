import{a as c}from"./index-BNSio4X_.js";function h(e){if(Array.isArray(e)){const s=e;return s.meta={page:1,limit:s.length,total:s.length},s}const t=(e==null?void 0:e.data)??[],r=(e==null?void 0:e.meta)??{page:1,limit:t.length,total:t.length};return t.meta=r,t}async function n({method:e="get",paths:t=[],body:r,params:s}){var i;let o;for(const a of t)try{return(await c.request({url:a,method:e,data:r,params:s})).data}catch(d){if(o=d,((i=d==null?void 0:d.response)==null?void 0:i.status)===401)throw d}throw o||new Error("All paths failed")}const f={listRoles:()=>n({paths:["/roles"]}),createRole:e=>n({method:"post",paths:["/roles"],body:e}),updateRole:(e,t)=>n({method:"put",paths:[`/roles/${encodeURIComponent(e)}`],body:t}),deleteRole:e=>n({method:"delete",paths:[`/roles/${encodeURIComponent(e)}`]}),listUsers:(e={})=>n({paths:["/admin/staff"],params:e}).then(h),getUser:e=>n({paths:[`/admin/staff/${encodeURIComponent(e)}`]}),createUser:e=>{const t=e.roleIds??(e.roleId?[e.roleId]:[]),r=e.branchId??(Array.isArray(e.branchIds)?e.branchIds[0]:void 0),s={...e,roleIds:t,branchId:r};return delete s.roleId,delete s.branchIds,n({method:"post",paths:["/admin/staff"],body:s})},updateUser:(e,t)=>{const r=t.roleIds??(t.roleId?[t.roleId]:void 0),s=t.branchId??(Array.isArray(t.branchIds)?t.branchIds[0]:void 0),o={...t,...r?{roleIds:r}:{},...s!==void 0?{branchId:s}:{}};return delete o.roleId,delete o.branchIds,n({method:"put",paths:[`/admin/staff/${encodeURIComponent(e)}`],body:o})},resetUserPassword:(e,t)=>n({method:"patch",paths:[`/admin/staff/${encodeURIComponent(e)}/password`],body:{password:t}}),toggleUserStatus:(e,t)=>n({method:"patch",paths:[`/admin/staff/${encodeURIComponent(e)}/status`],body:{isActive:t}}),assignUserBranches:(e,t=[])=>n({method:"put",paths:[`/admin/staff/${encodeURIComponent(e)}/branches`],body:{branchIds:t}}),listPermissions:()=>n({paths:["/permissions"]}),updatePermission:(e,t,r="")=>n({method:"put",paths:[`/permissions/${encodeURIComponent(e)}`],body:{roles:t,description:r}}),listAudit:e=>n({paths:["/admin/audit","/audit-logs"],params:e}),listBranches:()=>n({paths:["/branches"]}),can:(e,t,r)=>{if(!e)return!1;const s=String(e.role||"").toLowerCase();if(s==="admin"||s==="director")return!0;if(!Array.isArray(r))return!1;const o=r.find(a=>a.action===t);return o?(Array.isArray(o.roles)?o.roles.map(a=>String(a).toLowerCase()):[]).includes(s):!1}};export{f as A};
